package io.github.apace100.origins.power.factory;

import com.google.gson.JsonObject;
import io.github.apace100.origins.Origins;
import io.github.apace100.origins.power.InvulnerablePower;
import io.github.apace100.origins.power.PowerType;
import io.github.apace100.origins.power.factory.condition.damage.DamageCondition;
import io.github.apace100.origins.util.SerializationHelper;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.util.Identifier;

import java.util.List;

public class InvulnerabilityPowerFactory extends PowerFactory<InvulnerablePower> {

    private static final Identifier SERIALIZER = new Identifier(Origins.MODID, "invulnerability");

    private final List<List<DamageCondition>> damageConditions;

    public InvulnerabilityPowerFactory(List<List<DamageCondition>> damageConditions) {
        this.damageConditions = damageConditions;
    }

    @Override
    public InvulnerablePower apply(PowerType<InvulnerablePower> powerType, PlayerEntity playerEntity) {
        InvulnerablePower power = new InvulnerablePower(powerType, playerEntity, SerializationHelper.buildNoAmountDamageConditionPredicate(damageConditions));
        super.addConditions(power);
        return power;
    }

    @Override
    public Identifier getSerializerId() {
        return SERIALIZER;
    }

    public static class Serializer extends PowerFactory.Serializer<InvulnerabilityPowerFactory> {

        @Override
        public void write(InvulnerabilityPowerFactory factory, PacketByteBuf buf) {
            SerializationHelper.writeDamageConditions(factory.damageConditions, buf);
            super.writeConditions(factory, buf);
        }

        @Environment(EnvType.CLIENT)
        @Override
        public InvulnerabilityPowerFactory read(PacketByteBuf buf) {
            List<List<DamageCondition>> conditions = SerializationHelper.readDamageConditions(buf);
            InvulnerabilityPowerFactory factory = new InvulnerabilityPowerFactory(conditions);
            super.readConditions(factory, buf);
            return factory;
        }

        @Override
        public InvulnerabilityPowerFactory read(JsonObject json) {
            List<List<DamageCondition>> conditions = null;
            if(json.has("damage_condition")) {
                conditions = SerializationHelper.readDamageConditions(json.get("damage_condition"));
            }
            InvulnerabilityPowerFactory factory = new InvulnerabilityPowerFactory(conditions);
            super.readConditions(factory, json);
            return factory;
        }
    }
}
