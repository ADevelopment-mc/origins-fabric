package io.github.apace100.origins.power.factory;

import com.google.gson.JsonObject;
import com.google.gson.JsonSyntaxException;
import io.github.apace100.origins.Origins;
import io.github.apace100.origins.power.PowerType;
import io.github.apace100.origins.power.WaterVulnerabilityPower;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.util.Identifier;
import net.minecraft.util.JsonHelper;

public class WaterVulnerabilityPowerFactory extends PowerFactory<WaterVulnerabilityPower> {

    private static final Identifier SERIALIZER = new Identifier(Origins.MODID, "water_vulnerability");

    private final int beginDamageIn;
    private final int damageInterval;
    private final float damageAmountEasy;
    private final float damageAmount;
    private final float waterProtEffectiveness;

    public WaterVulnerabilityPowerFactory(int beginDamageIn, int damageInterval, float damageAmountEasy, float damageAmount, float waterProtEffectiveness) {
        this.beginDamageIn = beginDamageIn;
        this.damageInterval = damageInterval;
        this.damageAmountEasy = damageAmountEasy;
        this.damageAmount = damageAmount;
        this.waterProtEffectiveness = waterProtEffectiveness;
    }

    @Override
    public WaterVulnerabilityPower apply(PowerType<WaterVulnerabilityPower> powerType, PlayerEntity playerEntity) {
        WaterVulnerabilityPower power = new WaterVulnerabilityPower(powerType, playerEntity, beginDamageIn, damageInterval, damageAmountEasy, damageAmount, waterProtEffectiveness);
        super.addConditions(power);
        return power;
    }

    @Override
    public Identifier getSerializerId() {
        return SERIALIZER;
    }

    public static class Serializer extends PowerFactory.Serializer<WaterVulnerabilityPowerFactory> {

        @Override
        public void write(WaterVulnerabilityPowerFactory factory, PacketByteBuf buf) {
            buf.writeInt(factory.beginDamageIn);
            buf.writeInt(factory.damageInterval);
            buf.writeFloat(factory.damageAmountEasy);
            buf.writeFloat(factory.damageAmount);
            buf.writeFloat(factory.waterProtEffectiveness);
            super.writeConditions(factory, buf);
        }

        @Environment(EnvType.CLIENT)
        @Override
        public WaterVulnerabilityPowerFactory read(PacketByteBuf buf) {
            int beginDamageIn = buf.readInt();
            int damageInterval = buf.readInt();
            float damageEasy = buf.readFloat();
            float damage = buf.readFloat();
            float waterProt = buf.readFloat();
            WaterVulnerabilityPowerFactory factory = new WaterVulnerabilityPowerFactory(beginDamageIn, damageInterval, damageEasy, damage, waterProt);
            super.readConditions(factory, buf);
            return factory;
        }

        @Override
        public WaterVulnerabilityPowerFactory read(JsonObject json) {
            if(!json.has("interval") || !json.get("interval").isJsonPrimitive()) {
                throw new JsonSyntaxException("WaterVulnerabilityPower json requires \"interval\" integer.");
            }
            int damageInterval = JsonHelper.getInt(json, "interval");
            int beginDamageIn = JsonHelper.getInt(json, "onset_delay", damageInterval);
            if(!json.has("damage") || !json.get("damage").isJsonPrimitive()) {
                throw new JsonSyntaxException("WaterVulnerabilityPower json requires \"damage\" float.");
            }
            float damage = JsonHelper.getFloat(json, "damage");
            float damageEasy = JsonHelper.getFloat(json, "damage_easy", damage);
            float waterProt = JsonHelper.getFloat(json, "water_protection", 1.0F);
            WaterVulnerabilityPowerFactory factory = new WaterVulnerabilityPowerFactory(beginDamageIn, damageInterval, damageEasy, damage, waterProt);
            super.readConditions(factory, json);
            return factory;
        }
    }
}
